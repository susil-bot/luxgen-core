# ========================================
# üê≥ DOCKER COMPOSE - DEVELOPMENT
# ========================================

version: '3.8'

services:
  # ========================================
  # üöÄ BACKEND API SERVICE (DEVELOPMENT)
  # ========================================
  backend:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: trainer-platform-backend-dev
    restart: unless-stopped
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=development
      - PORT=3001
      - MONGODB_URL=mongodb://mongodb:27017/trainer_platform_dev
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=dev-jwt-secret-key
      - GROQ_API_KEY=${GROQ_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASS=${SMTP_PASS}
    volumes:
      - .:/app
      - /app/node_modules
      - ./logs:/app/logs
      - ./uploads:/app/uploads
    depends_on:
      - mongodb
      - redis
    networks:
      - trainer-network-dev
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    command: ["npm", "run", "dev"]

  # ========================================
  # üóÑÔ∏è MONGODB DATABASE (DEVELOPMENT)
  # ========================================
  mongodb:
    image: mongo:6.0
    container_name: trainer-platform-mongodb-dev
    restart: unless-stopped
    ports:
      - "27018:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=password
      - MONGO_INITDB_DATABASE=trainer_platform_dev
    volumes:
      - mongodb_dev_data:/data/db
      - ./scripts/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - trainer-network-dev
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # ========================================
  # üî¥ REDIS CACHE (DEVELOPMENT)
  # ========================================
  redis:
    image: redis:7-alpine
    container_name: trainer-platform-redis-dev
    restart: unless-stopped
    ports:
      - "6380:6379"
    command: redis-server --appendonly yes --requirepass redispassword
    volumes:
      - redis_dev_data:/data
    networks:
      - trainer-network-dev
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # ========================================
  # üß™ TESTING SERVICE
  # ========================================
  test:
    build:
      context: .
      dockerfile: Dockerfile
      target: testing
    container_name: trainer-platform-test
    environment:
      - NODE_ENV=test
      - MONGODB_URL=mongodb://mongodb:27017/trainer_platform_test
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=test-jwt-secret-key
    volumes:
      - .:/app
      - /app/node_modules
    depends_on:
      - mongodb
      - redis
    networks:
      - trainer-network-dev
    command: ["npm", "test"]

  # ========================================
  # üìä MONITORING (DEVELOPMENT)
  # ========================================
  prometheus:
    image: prom/prometheus:latest
    container_name: trainer-platform-prometheus-dev
    restart: unless-stopped
    ports:
      - "9091:9090"
    volumes:
      - ./monitoring/prometheus.dev.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_dev_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=24h'
      - '--web.enable-lifecycle'
    networks:
      - trainer-network-dev
    depends_on:
      - backend

  grafana:
    image: grafana/grafana:latest
    container_name: trainer-platform-grafana-dev
    restart: unless-stopped
    ports:
      - "3002:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_dev_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - trainer-network-dev
    depends_on:
      - prometheus

  # ========================================
  # üîç DEBUGGING TOOLS
  # ========================================
  mongo-express:
    image: mongo-express:latest
    container_name: trainer-platform-mongo-express
    restart: unless-stopped
    ports:
      - "8081:8081"
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=admin
      - ME_CONFIG_MONGODB_ADMINPASSWORD=password
      - ME_CONFIG_MONGODB_URL=mongodb://admin:password@mongodb:27017/
      - ME_CONFIG_BASICAUTH_USERNAME=admin
      - ME_CONFIG_BASICAUTH_PASSWORD=password
    networks:
      - trainer-network-dev
    depends_on:
      - mongodb

  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: trainer-platform-redis-commander
    restart: unless-stopped
    ports:
      - "8082:8081"
    environment:
      - REDIS_HOSTS=local:redis:6379:0:redispassword
    networks:
      - trainer-network-dev
    depends_on:
      - redis

# ========================================
# üì¶ VOLUMES (DEVELOPMENT)
# ========================================
volumes:
  mongodb_dev_data:
    driver: local
  redis_dev_data:
    driver: local
  prometheus_dev_data:
    driver: local
  grafana_dev_data:
    driver: local

# ========================================
# üåê NETWORKS (DEVELOPMENT)
# ========================================
networks:
  trainer-network-dev:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16 