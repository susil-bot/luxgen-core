/** * AI Service Module * Enhanced AI service supporting all frontend requirements */ const EnhancedAIService = require('./aiServiceEnhanced'); class AIService { constructor() { this.enhancedService = EnhancedAIService; } async initialize() { return this.enhancedService.initialize(); } // Legacy methods for backward compatibility async generateContent(prompt, options = {}) { return this.enhancedService.generateContent({ type: 'text', prompt, options, userId: 'legacy', tenantId: 'legacy'}); } async generateContentWithRAG(prompt, options = {}) { return this.enhancedService.generateContent({ type: 'text', prompt, context: 'RAG enabled', options, userId: 'legacy', tenantId: 'legacy'}); } async addToKnowledgeBase(documentId, content, metadata = {}) { // Legacy method - now handled by content library return { documentId, chunksCount: 1, message: 'Document added to knowledge base'}; } async searchKnowledgeBase(query, maxResults = 5) { // Legacy method - return mock results return [ { content: `Search result for: ${query}`, score: 0.95, metadata: { source: 'knowledge_base'} } ]; } async clearKnowledgeBase() { // Legacy method return { success: true, message: 'Knowledge base cleared'}; } getKnowledgeBaseStats() { // Legacy method return { totalDocuments: 0, totalChunks: 0, averageChunkSize: 0, lastUpdated: new Date() }; } async checkHealth() { return this.enhancedService.getHealth({ userId: 'legacy', tenantId: 'legacy'}); } async healthCheck() { return this.enhancedService.getHealth({ userId: 'legacy', tenantId: 'legacy'}); } async getContentLibrary() { return this.enhancedService.getContentLibrary({ userId: 'legacy', tenantId: 'legacy', page: 1, limit: 10 }); } getContentCategories() { return [ 'Training Materials', 'Assessments', 'Presentations', 'Blog Posts', 'Social Media', 'Emails', 'Product Descriptions']; } getRecentContent() { return []; } getPopularContent() { return []; } getContentTemplates() { return this.enhancedService.getTemplates({ userId: 'legacy', tenantId: 'legacy'}); }
} module.exports = new AIService(); 