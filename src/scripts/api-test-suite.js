#!/usr/bin/env node /** * Comprehensive API Testing Suite * Tests all backend endpoints and functionality */ const axios = require('axios');
const colors = require('colors'); /** * API Test Suite Configuration * * All configuration values are now environment-driven to avoid hardcoded values. * Set these environment variables for different testing environments. */ // Configuration from environment variables
const BASE_URL = process.env.API_BASE_URL || process.env.BACKEND_URL || 'http://localhost:3001';
const API_VERSION = process.env.API_VERSION || 'v1';
const API_PREFIX = `/api/${API_VERSION}`; // Test configuration
const TEST_TIMEOUT = parseInt(process.env.TEST_TIMEOUT) || 30000;
const TEST_RETRIES = parseInt(process.env.TEST_RETRIES) || 3;
const TEST_USER_EMAIL = process.env.TEST_USER_EMAIL || `test-${Date.now()}@example.com`;
const TEST_USER_PASSWORD = process.env.TEST_USER_PASSWORD || 'testpassword123'; // Test results tracking
let testResults = { total: 0, passed: 0, failed: 0, errors: []
}; // Helper functions
const log = (message, type = 'info') => { const timestamp = new Date().toISOString(); const prefix = type === 'error'? '': type === 'success'? '': ''; console.log(`${prefix} [${timestamp}] ${message}`);
}; const makeRequest = async (method, endpoint, data = null, headers = {}) => { try { const url = `${BASE_URL}${endpoint}`; const config = { method, url, headers: { 'Content-Type': 'application/json', ...headers } }; if (data) { config.data = data; } const response = await axios(config); return { success: true, data: response.data, status: response.status }; } catch (error) { return { success: false, error: error.response?.data || error.message, status: error.response?.status || 500 }; }
}; const runTest = async (testName, testFunction) => { testResults.total++; log(`Running test: ${testName}`, 'info'); try { await testFunction(); testResults.passed++; log(` Test passed: ${testName}`, 'success'); } catch (error) { testResults.failed++; testResults.errors.push({ test: testName, error: error.message }); log(` Test failed: ${testName} - ${error.message}`, 'error'); }
}; // Test functions
const testHealthCheck = async () => { const result = await makeRequest('GET', '/health'); if (!result.success || result.status !== 200) { throw new Error('Health check failed'); } if (!result.data.status || result.data.status !== 'healthy') { throw new Error('Service not healthy'); }
}; const testDatabaseStatus = async () => { const result = await makeRequest('GET', '/api/database/status'); if (!result.success || result.status !== 200) { throw new Error('Database status check failed'); }
}; const testMongoDBStatus = async () => { const result = await makeRequest('GET', '/api/mongodb/status'); if (!result.success || result.status !== 200) { throw new Error('MongoDB status check failed'); }
}; const testUserRegistration = async () => { const userData = { email: TEST_USER_EMAIL, username: `testuser${Date.now()}`, password: TEST_USER_PASSWORD, firstName: process.env.TEST_USER_FIRST_NAME || 'Test', lastName: process.env.TEST_USER_LAST_NAME || 'User'}; const result = await makeRequest('POST', `${API_PREFIX}/auth/v2/register`, userData); if (!result.success || result.status !== 201) { throw new Error('User registration failed'); } if (!result.data.success || !result.data.user) { throw new Error('Invalid registration response'); } return result.data.user;
}; const testUserLogin = async (email, password) => { const loginData = { email, password }; const result = await makeRequest('POST', `${API_PREFIX}/auth/v2/login`, loginData); if (!result.success || result.status !== 200) { throw new Error('User login failed'); } if (!result.data.success || !result.data.tokens) { throw new Error('Invalid login response'); } return result.data.tokens.accessToken;
}; const testGetUserProfile = async (token) => { const headers = { Authorization: `Bearer ${token}` }; const result = await makeRequest('GET', `${API_PREFIX}/auth/v2/profile`, null, headers); if (!result.success || result.status !== 200) { throw new Error('Get profile failed'); } if (!result.data.success || !result.data.user) { throw new Error('Invalid profile response'); }
}; const testCreateTenant = async (token) => { const tenantData = { name: `Test Tenant ${Date.now()}`, subdomain: `test-tenant-${Date.now()}`, description: 'Test tenant for API testing', theme: 'default', features: { aiAssistant: true, realTimeCollaboration: true, advancedAnalytics: true, multiTenancy: true } }; const headers = { Authorization: `Bearer ${token}` }; const result = await makeRequest('POST', `${API_PREFIX}/tenants/v2`, tenantData, headers); if (!result.success || result.status !== 201) { throw new Error('Tenant creation failed'); } if (!result.data.success || !result.data.tenant) { throw new Error('Invalid tenant creation response'); } return result.data.tenant;
}; const testGetTenants = async (token) => { const headers = { Authorization: `Bearer ${token}` }; const result = await makeRequest('GET', `${API_PREFIX}/tenants/v2`, null, headers); if (!result.success || result.status !== 200) { throw new Error('Get tenants failed'); } if (!result.data.success || !Array.isArray(result.data.tenants)) { throw new Error('Invalid tenants response'); }
}; const testGetUsers = async (token) => { const headers = { Authorization: `Bearer ${token}` }; const result = await makeRequest('GET', `${API_PREFIX}/users/v2`, null, headers); if (!result.success || result.status !== 200) { throw new Error('Get users failed'); } if (!result.data.success || !Array.isArray(result.data.users)) { throw new Error('Invalid users response'); }
}; const testUserSearch = async (token) => { const headers = { Authorization: `Bearer ${token}` }; const result = await makeRequest('GET', `${API_PREFIX}/users/v2/search/query?q=test`, null, headers); if (!result.success || result.status !== 200) { throw new Error('User search failed'); } if (!result.data.success) { throw new Error('Invalid search response'); }
}; const testTenantStats = async (token) => { const headers = { Authorization: `Bearer ${token}` }; const result = await makeRequest('GET', `${API_PREFIX}/tenants/v2/stats/overview`, null, headers); if (!result.success || result.status !== 200) { throw new Error('Tenant stats failed'); } if (!result.data.success || !result.data.stats) { throw new Error('Invalid stats response'); }
}; const testUserStats = async (token) => { const headers = { Authorization: `Bearer ${token}` }; const result = await makeRequest('GET', `${API_PREFIX}/users/v2/stats/overview`, null, headers); if (!result.success || result.status !== 200) { throw new Error('User stats failed'); } if (!result.data.success || !result.data.stats) { throw new Error('Invalid user stats response'); }
}; const testLogout = async (token) => { const headers = { Authorization: `Bearer ${token}` }; const result = await makeRequest('POST', `${API_PREFIX}/auth/v2/logout`, {}, headers); if (!result.success || result.status !== 200) { throw new Error('Logout failed'); } if (!result.data.success) { throw new Error('Invalid logout response'); }
}; // Main test suite
const runTestSuite = async () => { console.log('Starting Comprehensive API Test Suite'.rainbow); console.log('='.repeat(60)); console.log(` Testing API at: ${BASE_URL}`); console.log(`ðŸ”— API Prefix: ${API_PREFIX}`); console.log('='.repeat(60)); let testUser = null; let testToken = null; let testTenant = null; // Basic connectivity tests await runTest('Health Check', testHealthCheck); await runTest('Database Status', testDatabaseStatus); await runTest('MongoDB Status', testMongoDBStatus); // Authentication tests await runTest('User Registration', async () => { testUser = await testUserRegistration(); }); await runTest('User Login', async () => { testToken = await testUserLogin(testUser.email, TEST_USER_PASSWORD); }); await runTest('Get User Profile', async () => { await testGetUserProfile(testToken); }); // Tenant management tests await runTest('Create Tenant', async () => { testTenant = await testCreateTenant(testToken); }); await runTest('Get Tenants', async () => { await testGetTenants(testToken); }); await runTest('Get Tenant by Subdomain', async () => { const result = await makeRequest('GET', `${API_PREFIX}/tenants/v2/subdomain/${testTenant.subdomain}`); if (!result.success || result.status !== 200) { throw new Error('Get tenant by subdomain failed'); } }); // User management tests await runTest('Get Users', async () => { await testGetUsers(testToken); }); await runTest('User Search', async () => { await testUserSearch(testToken); }); // Statistics tests await runTest('Tenant Statistics', async () => { await testTenantStats(testToken); }); await runTest('User Statistics', async () => { await testUserStats(testToken); }); // Cleanup tests await runTest('User Logout', async () => { await testLogout(testToken); }); // Test error handling await runTest('Invalid Login', async () => { const result = await makeRequest('POST', `${API_PREFIX}/auth/v2/login`, { email: 'invalid@example.com', password: 'wrongpassword'}); if (result.success || result.status !== 401) { throw new Error('Should have failed with invalid credentials'); } }); await runTest('Unauthorized Access', async () => { const result = await makeRequest('GET', `${API_PREFIX}/users/v2`); if (result.success || result.status !== 401) { throw new Error('Should have failed without authentication'); } }); // Print results console.log('\n'+ '='.repeat(60)); console.log('TEST RESULTS SUMMARY'.rainbow); console.log('='.repeat(60)); console.log(`Total Tests: ${testResults.total}`); console.log(` Passed: ${testResults.passed}`.green); console.log(` Failed: ${testResults.failed}`.red); console.log(` Success Rate: ${((testResults.passed / testResults.total) * 100).toFixed(1)}%`); if (testResults.failed > 0) { console.log('\n FAILED TESTS:'.red); testResults.errors.forEach(error => { console.log(` - ${error.test}: ${error.error}`.red); }); } if (testResults.failed === 0) { console.log('\n ALL TESTS PASSED!'.green); } else { console.log(`\n WARNING: ${testResults.failed} test(s) failed.`.yellow); } console.log('='.repeat(60));
}; // Run the test suite
if (require.main === module) { runTestSuite().catch(error => { console.error('Test suite failed:', error); process.exit(1); });
} module.exports = { runTestSuite, makeRequest, testResults
};
