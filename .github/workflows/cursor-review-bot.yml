name: ü§ñ Cursor Code Review Bot

on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches: [main, develop]

jobs:
  cursor-review:
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: üõ†Ô∏è Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: üì¶ Install dependencies
        run: |
          npm ci

      - name: üîç Run Code Quality Review
        run: |
          echo "ü§ñ Starting Code Quality Review..."
          
          # Create review summary
          echo "## üîç Code Quality Review Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Check if this is a PR
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "üìù Analyzing pull request: ${{ github.event.pull_request.title }}"
            echo "### üìã Pull Request Analysis" >> $GITHUB_STEP_SUMMARY
            echo "- **PR Title**: ${{ github.event.pull_request.title }}" >> $GITHUB_STEP_SUMMARY
            echo "- **PR Number**: #${{ github.event.pull_request.number }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Author**: ${{ github.event.pull_request.user.login }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Files Changed**: ${{ github.event.pull_request.changed_files }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Additions**: +${{ github.event.pull_request.additions }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Deletions**: -${{ github.event.pull_request.deletions }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "üìù Analyzing recent commits..."
            echo "### üìã Commit Analysis" >> $GITHUB_STEP_SUMMARY
            echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üéØ Code Quality Checks" >> $GITHUB_STEP_SUMMARY
          
          # Run basic code quality checks
          echo "Running code quality checks..."
          
          # Check for console.log statements
          CONSOLE_COUNT=$(find src/ -name "*.js" -exec grep -l "console\.log" {} \; | wc -l)
          if [ $CONSOLE_COUNT -gt 0 ]; then
            echo "‚ö†Ô∏è Found $CONSOLE_COUNT files with console.log statements" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚úÖ No console.log statements found" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Check for TODO comments
          TODO_COUNT=$(find src/ -name "*.js" -exec grep -c "TODO\|FIXME\|HACK" {} \; | awk '{sum += $1} END {print sum}')
          if [ $TODO_COUNT -gt 0 ]; then
            echo "üìù Found $TODO_COUNT TODO/FIXME comments" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚úÖ No TODO/FIXME comments found" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Check for long lines (> 100 characters)
          LONG_LINES=$(find src/ -name "*.js" -exec awk 'length($0) > 100 {count++} END {print count+0}' {} \; | awk '{sum += $1} END {print sum}')
          if [ $LONG_LINES -gt 0 ]; then
            echo "‚ö†Ô∏è Found $LONG_LINES lines longer than 100 characters" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚úÖ No long lines found" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Check for potential security issues
          SECURITY_ISSUES=$(find src/ -name "*.js" -exec grep -l "password.*=.*['\"]" {} \; | wc -l)
          if [ $SECURITY_ISSUES -gt 0 ]; then
            echo "üîí Found $SECURITY_ISSUES potential hardcoded secrets" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚úÖ No hardcoded secrets found" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìö Recommendations" >> $GITHUB_STEP_SUMMARY
          echo "- Use proper logging instead of console.log" >> $GITHUB_STEP_SUMMARY
          echo "- Keep lines under 100 characters for readability" >> $GITHUB_STEP_SUMMARY
          echo "- Use environment variables for sensitive data" >> $GITHUB_STEP_SUMMARY
          echo "- Add JSDoc comments for better documentation" >> $GITHUB_STEP_SUMMARY
          
          echo "‚úÖ Code quality review completed!"

      - name: üìä Generate Review Summary
        if: always()
        run: |
          echo "## ü§ñ Cursor Code Review Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìã Review Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Repository**: ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Event**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "### üîç Pull Request Analysis" >> $GITHUB_STEP_SUMMARY
            echo "- **PR Title**: ${{ github.event.pull_request.title }}" >> $GITHUB_STEP_SUMMARY
            echo "- **PR Number**: #${{ github.event.pull_request.number }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Author**: ${{ github.event.pull_request.user.login }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Files Changed**: ${{ github.event.pull_request.changed_files }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Additions**: +${{ github.event.pull_request.additions }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Deletions**: -${{ github.event.pull_request.deletions }}" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üéØ Review Focus Areas" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Code Quality & Best Practices" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Security Vulnerabilities" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Performance Optimizations" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Documentation & Comments" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Error Handling" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Testing Coverage" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìö Resources" >> $GITHUB_STEP_SUMMARY
          echo "- [Cursor Documentation](https://cursor.sh/docs)" >> $GITHUB_STEP_SUMMARY
          echo "- [Code Review Best Practices](https://github.com/microsoft/vscode/wiki/Code-Review-Guidelines)" >> $GITHUB_STEP_SUMMARY
          echo "- [LuxGen Coding Standards](./docs/CODE_QUALITY_GUIDE.md)" >> $GITHUB_STEP_SUMMARY

      - name: üö® Handle Review Errors
        if: failure()
        run: |
          echo "‚ùå Cursor Code Review failed"
          echo "This could be due to:"
          echo "- Missing CURSOR_API_KEY secret"
          echo "- Network connectivity issues"
          echo "- Invalid repository permissions"
          echo "- Large file size or too many changes"
          echo ""
          echo "Please check the logs above for detailed error information."

      - name: ‚úÖ Review Complete
        if: success()
        run: |
          echo "‚úÖ Cursor Code Review completed successfully!"
          echo "Check the comments above for detailed feedback and suggestions."
