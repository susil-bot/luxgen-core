const mongoose = require('mongoose');
require('dotenv').config(); // MongoDB connection configuration
const MONGODB_URL = process.env.MONGODB_URL || 'mongodb+srv://sobhanasusil064:<db_password>@luxgen-ecommerce.bgrskvi.mongodb.net/trainer_platform?retryWrites=true&w=majority'; // Import models
const User = require('../src/models/User');
const Tenant = require('../src/models/Tenant'); const Poll = require('../src/models/Poll');
const TenantSchema = require('../src/models/TenantSchema'); class MongoDBSetup { constructor() { this.connection = null; this.db = null; } async connect() { try { console.log('ðŸ”Œ Connecting to MongoDB...'); const connectionOptions = { maxPoolSize: 10, minPoolSize: 2, serverSelectionTimeoutMS: 30000, socketTimeoutMS: 45000, bufferCommands: false, maxIdleTimeMS: 30000, retryWrites: true, w: 'majority', readPreference: 'primary', heartbeatFrequencyMS: 10000, family: 4 }; this.connection = await mongoose.connect(MONGODB_URL, connectionOptions); this.db = this.connection.connection.db; console.log('MongoDB connected successfully'); console.log(` Database: ${this.db.databaseName}`); return this.connection; } catch (error) { console.error('Failed to connect to MongoDB:', error.message); throw error; } } async createCollections() { try { console.log('\nðŸ“‹ Creating collections...'); const collections = [ 'tenants', 'users', 'polls', 'tenantschemas']; for (const collectionName of collections) { try { await this.db.createCollection(collectionName); console.log(` Created collection: ${collectionName}`); } catch (error) { if (error.code === 48) { // Collection already exists console.log(` Collection already exists: ${collectionName}`); } else { console.error(` Failed to create collection ${collectionName}:`, error.message); } } } console.log('All collections created successfully'); } catch (error) { console.error('Failed to create collections:', error.message); throw error; } } async createIndexes() { try { console.log('\n Creating indexes...'); // Tenants collection indexes await this.createTenantIndexes(); // Users collection indexes await this.createUserIndexes(); // UserDetails collection indexes await this.createUserDetailsIndexes(); // UserRegistrations collection indexes await this.createUserRegistrationIndexes(); // Polls collection indexes await this.createPollIndexes(); // TenantSchemas collection indexes await this.createTenantSchemaIndexes(); console.log('All indexes created successfully'); } catch (error) { console.error('Failed to create indexes:', error.message); throw error; } } async createTenantIndexes() { const collection = this.db.collection('tenants'); const indexes = [ { key: { slug: 1 }, unique: true, name: 'slug_unique'}, { key: { contactEmail: 1 }, name: 'contactEmail'}, { key: { 'subscription.status': 1 }, name: 'subscription_status'}, { key: { status: 1 }, name: 'status'}, { key: { createdAt: -1 }, name: 'createdAt_desc'}, { key: { 'usage.lastActivity': -1 }, name: 'lastActivity_desc'} ]; for (const index of indexes) { try { await collection.createIndex(index.key, { unique: index.unique || false, name: index.name }); console.log(` Created tenant index: ${index.name}`); } catch (error) { console.log(` Index already exists: ${index.name}`); } } } async createUserIndexes() { const collection = this.db.collection('users'); const indexes = [ { key: { tenantId: 1, email: 1 }, name: 'tenantId_email'}, { key: { tenantId: 1, role: 1 }, name: 'tenantId_role'}, { key: { email: 1 }, name: 'email'}, { key: { isActive: 1 }, name: 'isActive'}, { key: { lastLogin: -1 }, name: 'lastLogin_desc'} ]; for (const index of indexes) { try { await collection.createIndex(index.key, { name: index.name }); console.log(` Created user index: ${index.name}`); } catch (error) { console.log(` Index already exists: ${index.name}`); } } } async createUserDetailsIndexes() { const collection = this.db.collection('userdetails'); const indexes = [ { key: { userId: 1 }, unique: true, name: 'userId_unique'}, { key: { 'skills.name': 1 }, name: 'skills_name'}, { key: { 'workExperience.company': 1 }, name: 'workExperience_company'}, { key: { 'education.institution': 1 }, name: 'education_institution'} ]; for (const index of indexes) { try { await collection.createIndex(index.key, { unique: index.unique || false, name: index.name }); console.log(` Created userDetails index: ${index.name}`); } catch (error) { console.log(` Index already exists: ${index.name}`); } } } async createUserRegistrationIndexes() { const collection = this.db.collection('userregistrations'); const indexes = [ { key: { email: 1 }, unique: true, name: 'email_unique'}, { key: { tenantId: 1 }, name: 'tenantId'}, { key: { status: 1 }, name: 'status'}, { key: { emailVerificationToken: 1 }, name: 'emailVerificationToken'}, { key: { createdAt: -1 }, name: 'createdAt_desc'} ]; for (const index of indexes) { try { await collection.createIndex(index.key, { unique: index.unique || false, name: index.name }); console.log(` Created userRegistration index: ${index.name}`); } catch (error) { console.log(` Index already exists: ${index.name}`); } } } async createPollIndexes() { const collection = this.db.collection('polls'); const indexes = [ { key: { tenantId: 1 }, name: 'tenantId'}, { key: { status: 1 }, name: 'status'}, { key: { createdBy: 1 }, name: 'createdBy'}, { key: { scheduledDate: 1 }, name: 'scheduledDate'}, { key: { expiresAt: 1 }, name: 'expiresAt'}, { key: { 'recipients.email': 1 }, name: 'recipients_email'}, { key: { createdAt: -1 }, name: 'createdAt_desc'}, { key: { tags: 1 }, name: 'tags'}, { key: { niche: 1 }, name: 'niche'} ]; for (const index of indexes) { try { await collection.createIndex(index.key, { name: index.name }); console.log(` Created poll index: ${index.name}`); } catch (error) { console.log(` Index already exists: ${index.name}`); } } } async createTenantSchemaIndexes() { const collection = this.db.collection('tenantschemas'); const indexes = [ { key: { slug: 1 }, unique: true, name: 'slug_unique'}, { key: { contactEmail: 1 }, name: 'contactEmail'}, { key: { createdAt: -1 }, name: 'createdAt_desc'} ]; for (const index of indexes) { try { await collection.createIndex(index.key, { unique: index.unique || false, name: index.name }); console.log(` Created tenantSchema index: ${index.name}`); } catch (error) { console.log(` Index already exists: ${index.name}`); } } } async createSampleData() { try { console.log('\n Creating sample data...'); // Create sample tenant const sampleTenant = new Tenant({ name: 'Sample Training Organization', slug: 'sample-org', description: 'A sample organization for testing', contactEmail: 'admin@sample-org.com', contactPhone: '+1234567890', website: 'https://sample-org.com', industry: 'Technology', companySize: '11-50', subscription: { plan: 'professional', status: 'active', startDate: new Date(), billingCycle: 'monthly', amount: 99, currency: 'USD'}, features: { polls: { enabled: true, maxPolls: 100, maxRecipients: 1000 }, analytics: { enabled: true, retention: 90 }, integrations: { slack: true, teams: false, email: true }, branding: { enabled: true, logo: null, colors: { primary: '#3B82F6', secondary: '#6B7280'} }, security: { sso: false, mfa: false, ipWhitelist: [] } }, usage: { pollsCreated: 0, totalRecipients: 0, totalResponses: 0, lastActivity: new Date() }, status: 'active', isVerified: true, settings: { allowPublicPolls: false, requireEmailVerification: true, autoArchivePolls: true, archiveAfterDays: 90, notificationPreferences: { email: true, inApp: true, slack: false } } }); const savedTenant = await sampleTenant.save(); console.log(` Created sample tenant: ${savedTenant.name} (ID: ${savedTenant._id})`); // Create sample user const sampleUser = new User({ tenantId: savedTenant._id.toString(), firstName: 'John', lastName: 'Doe', email: 'john.doe@sample-org.com', password: '$2a$12$LQv3c1yqBWVHxkd0LHAkCOYz6TtxMQJqhN8/LewdBPj4J/HS.iK8i', // password123 role: 'admin', department: 'Training', position: 'Training Manager', isActive: true, preferences: { notifications: { email: true, push: true, sms: false }, theme: 'light', language: 'en'} }); const savedUser = await sampleUser.save(); console.log(` Created sample user: ${savedUser.firstName} ${savedUser.lastName} (ID: ${savedUser._id})`); // Create sample user details const sampleUserDetails = new UserDetails({ userId: savedUser._id, dateOfBirth: new Date('1990-01-01'), gender: 'male', nationality: 'US', bio: 'Experienced training manager with expertise in corporate learning and development.', skills: [ { name: 'Training Management', level: 'expert', yearsOfExperience: 8, category: 'Management', verified: true }, { name: 'Instructional Design', level: 'advanced', yearsOfExperience: 5, category: 'Education', verified: true } ], workExperience: [ { company: 'Sample Training Organization', position: 'Training Manager', location: 'San Francisco, CA', startDate: new Date('2020-01-01'), isCurrent: true, description: 'Leading training initiatives and managing learning programs'} ], education: [ { institution: 'University of California', degree: 'Master of Education', field: 'Educational Technology', startDate: new Date('2015-09-01'), endDate: new Date('2017-06-01'), gpa: 3.8, description: 'Focused on technology-enhanced learning and instructional design'} ], socialLinks: { linkedin: 'https://linkedin.com/in/johndoe', twitter: 'https://twitter.com/johndoe', github: null, portfolio: null } }); const savedUserDetails = await sampleUserDetails.save(); console.log(` Created sample user details for user: ${savedUser._id}`); // Create sample poll const samplePoll = new Poll({ tenantId: savedTenant._id.toString(), title: 'Training Effectiveness Survey', description: 'Help us understand how effective our training programs are', niche: 'Training & Development', targetAudience: ['Employees', 'Managers', 'Trainers'], questions: [ { question: 'How would you rate the overall quality of our training programs?', type: 'rating', required: true, order: 1 }, { question: 'Which training topics would you like to see more of?', type: 'multiple_choice', options: ['Leadership Skills', 'Technical Skills', 'Soft Skills', 'Industry Knowledge'], required: true, order: 2 }, { question: 'What suggestions do you have for improving our training programs?', type: 'text', required: false, order: 3 } ], channels: ['email', 'web'], status: 'draft', priority: 'medium', tags: ['training', 'feedback', 'effectiveness'], settings: { isAnonymous: false, allowMultipleResponses: false, requireAuthentication: true, showResults: true, autoClose: true }, createdBy: savedUser._id }); const savedPoll = await samplePoll.save(); console.log(` Created sample poll: ${savedPoll.title} (ID: ${savedPoll._id})`); // Create sample tenant schema const sampleTenantSchema = new TenantSchema({ name: 'Sample Training Organization', slug: 'sample-org', description: 'Styling configuration for sample organization', contactEmail: 'admin@sample-org.com', contactPhone: '+1234567890', website: 'https://sample-org.com', industry: 'Technology', companySize: '11-50', styling: { branding: { logo: null, favicon: null, primaryColor: '#3B82F6', secondaryColor: '#1E40AF', accentColor: '#10B981', backgroundColor: '#FFFFFF', surfaceColor: '#F9FAFB'}, typography: { fontFamily: 'Inter, sans-serif', headingFont: 'Inter, sans-serif', bodyFont: 'Inter, sans-serif', fontSize: { xs: '0.75rem', sm: '0.875rem', base: '1rem', lg: '1.125rem', xl: '1.25rem', '2xl': '1.5rem', '3xl': '1.875rem', '4xl': '2.25rem'}, fontWeight: { light: 300, normal: 400, medium: 500, semibold: 600, bold: 700 } }, spacing: { xs: '0.25rem', sm: '0.5rem', md: '1rem', lg: '1.5rem', xl: '2rem', '2xl': '3rem'} } }); const savedTenantSchema = await sampleTenantSchema.save(); console.log(` Created sample tenant schema for: ${savedTenantSchema.name}`); console.log('\n Sample data created successfully!'); console.log('\n Sample Data Summary:'); console.log(` - Tenant: ${savedTenant.name} (${savedTenant.slug})`); console.log(` - User: ${savedUser.firstName} ${savedUser.lastName} (${savedUser.email})`); console.log(` - Poll: ${savedPoll.title}`); console.log(` - User Details: Extended profile for ${savedUser.firstName}`); console.log(` - Tenant Schema: Styling configuration created`); } catch (error) { console.error('Failed to create sample data:', error.message); throw error; } } async listCollections() { try { console.log('\nðŸ“‹ Current Collections:'); const collections = await this.db.listCollections().toArray(); if (collections.length === 0) { console.log('No collections found'); } else { collections.forEach(collection => { console.log(` - ${collection.name}`); }); } } catch (error) { console.error('Failed to list collections:', error.message); } } async getCollectionStats() { try { console.log('\n Collection Statistics:'); const collections = ['tenants', 'users', 'userdetails', 'userregistrations', 'polls', 'tenantschemas']; for (const collectionName of collections) { try { const stats = await this.db.collection(collectionName).stats(); console.log(` ${collectionName}: ${stats.count} documents, ${Math.round(stats.size / 1024)}KB`); } catch (error) { console.log(` ${collectionName}: Collection not found`); } } } catch (error) { console.error('Failed to get collection stats:', error.message); } } async disconnect() { try { if (this.connection) { await mongoose.disconnect(); console.log('\nðŸ”Œ MongoDB connection closed'); } } catch (error) { console.error('Error closing connection:', error.message); } } async setup() { try { console.log('Starting MongoDB setup for Trainer Platform...\n'); // Connect to MongoDB await this.connect(); // Create collections await this.createCollections(); // Create indexes await this.createIndexes(); // Create sample data await this.createSampleData(); // List collections await this.listCollections(); // Get statistics await this.getCollectionStats(); console.log('\n MongoDB setup completed successfully!'); console.log('\n Next Steps:'); console.log('1. Update your .env file with the correct MongoDB password'); console.log('2. Test the database connection with your application'); console.log('3. Run the application to verify everything works'); console.log('4. Monitor the database performance and adjust indexes as needed'); } catch (error) { console.error('\n MongoDB setup failed:', error.message); throw error; } finally { await this.disconnect(); } }
} // Run the setup if this file is executed directly
if (require.main === module) { const setup = new MongoDBSetup(); setup.setup().catch(console.error);
} module.exports = MongoDBSetup; 